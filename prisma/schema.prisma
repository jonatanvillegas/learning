// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
  model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  credist       Int @default(5)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//modelo de la tabla course
model Course{
  id String @id @default(cuid())
  name String 
  image String
  units Unit[]
}

//modelo de la tabla unidad
model Unit{
  id String @id @default(cuid())
  courseId String
  name String
  //relacion entre tablas 
  course Course @relation(fields: [courseId], references: [id])
  chapters Chapter[]
  @@index([courseId], name: "courseId")
}
//tabla de capitulos
model Chapter{
  id String @id @default(cuid())
  unitId String
  name String
  youtubeSearchQuery String
  videoId String?
  summary String? @db.VarChar(3000)
  unit  Unit @relation(fields: [unitId], references: [id])
  questions Question[]
  @@index([unitId], name: "unitId")
}

model Question {
  id String @id @default(cuid())
  chapterId String

  question String @db.VarChar(3000)
  answer String @db.VarChar(3000)
  options String @db.VarChar(3000)
  chapter Chapter @relation(fields: [chapterId], references: [id])

  @@index([chapterId], name:"chapterId")
}